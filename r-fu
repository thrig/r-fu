#!/usr/bin/env perl

use strict;
use warnings;

use Config::Tiny ();
use File::Basename qw(basename);
use File::HomeDir ();
use File::Slurper qw(read_text);
use File::Spec ();
use File::Temp ();
use Getopt::Long qw(GetOptions);
use IPC::Run3 qw(run3);
# Backwards incompatibility: Xslate proved too HTMLish (always escaping
# things; this is troublesome for not-HTML needs) and Template::Simple
# too, well, simple, as the templates do need some logic (or I need to
# learn a *lot* more about R).
use Text::Template ();

my $Arlet_Dir = $ENV{ARLET_DIR}
  || File::Spec->catfile( File::HomeDir->my_home, "share/arlets" );

my @R_Command =
  qw(R --encoding=UTF-8 --no-restore --no-save --quiet --slave --args);

my $Prog_Name = basename($0);
my $Tmp_Fh;

GetOptions(
    'all-help'     => \my $Flag_All_Help,
    'column|col=i' => \my @Flag_Column,
    'help|h|?'     => \my $Flag_Help,
    'width=f'      => \my $Flag_Width,
    'height=f'     => \my $Flag_Height,
    'p-value|p=f'  => \my $Flag_Pvalue,
    'show-code'    => \my $Flag_Show_Code,
    'show-stdout'  => \my $Flag_Show_Stdout,
    'xlabel=s'     => \my $Flag_Xlabel,
    'ylabel=s'     => \my $Flag_Ylabel,
) or do { warn "$Prog_Name: error parsing options\n"; emit_help() };

# perhaps if when searching for something in the docs?
if ($Flag_All_Help) {
    opendir my $dh, $Arlet_Dir or die "$Prog_Name: could not open $Arlet_Dir: $!\n";
    while ( my $help_file = readdir($dh) ) {
        next if $help_file !~ m/\.help$/;
        ( my $arlet_name = $help_file ) =~ s/\.help//;
        print "-------------------- $arlet_name --------------------\n\n";
        open my $help_fh, '<', File::Spec->catfile( $Arlet_Dir, $help_file )
          or die "$Prog_Name: cannot open $help_file: $!\n";
        print while readline $help_fh;
        print "\n";
    }
    exit 64;
}

my $arlet = shift // emit_help();

if ($Flag_Help) {
    my $help_file = File::Spec->catfile( $Arlet_Dir, "$arlet.help" );
    open my $help_fh, '<', $help_file
      or die "$Prog_Name: cannot open $help_file: $!\n";
    print while readline $help_fh;
    exit 64;
}

my $arlet_file = File::Spec->catfile( $Arlet_Dir, $arlet );

die "$Prog_Name: cannot read arlet file '$arlet_file'\n" if !-r $arlet_file;

@Flag_Column = (1) if !@Flag_Column;
if ( defined $Flag_Pvalue ) {
    die "p-value out of range" if $Flag_Pvalue > 1 or $Flag_Pvalue <= 0;
} else {
    $Flag_Pvalue = 0.05;
}

##############################################################################
#
# MAIN

my $Config = load_config($arlet);

# Try to guess the output format. Remove this if proves problematic,
# perhaps something like `-o pdf` or `-o foo.png` ?
if (@ARGV) {
    for my $arg ( reverse @ARGV ) {
        if ( $arg =~ m/\.([^.]+)$/ ) {
            my $dev = $1;
            # KLUGE test to see if extant format; otherwise would need a list
            # of known formats...
            if ( exists $Config->{device}->{ $dev . "_width" } ) {
                $Config->{device}->{device} = $dev;
            }
            last;
        }
    }
}

if ( defined $Flag_Width ) {
    if ( !defined $Config->{device}->{device} ) {
        die "width set but no device found in $arlet.ini config file\n";
    }
    $Config->{device}->{ $Config->{device}->{device} . '_width' } = $Flag_Width;
}
if ( defined $Flag_Height ) {
    if ( !defined $Config->{device}->{device} ) {
        die "width set but no device found in $arlet.ini config file\n";
    }
    $Config->{device}->{ $Config->{device}->{device} . '_height' } =
      $Flag_Height;
}

if ( defined $Flag_Show_Stdout ) {
    $Config->{_}->{hide_stdout} = 0;
}

# For `... | r-fu ...` support; stdin is used to feed R code to R, so
# must instead create a temporary file, and inject that filename onto
# the arguments to R as hopefully appropriate. (Another option might be
# to template the data from stdin into the R code directly, but that's
# more work.)
if ( $Config->{_}->{read_stdin} ) {
    if ( !@ARGV ) {
        push @ARGV, stdin2tmpfile();
    } else {
        for my $arg (@ARGV) {
            if ( $arg eq '-' ) {
                $arg = stdin2tmpfile();
                last;
            }
        }
    }
}

my $dev = $Config->{device}->{device};
#                                                    TEMPLATE VALUES
my %tvalues = (
    Prog_Name  => $Prog_Name,
    args       => \@ARGV,
    arlet      => $arlet,
    arlet_file => $arlet_file,
    column     => \@Flag_Column,
    device     => $dev,
    height     => $Config->{device}->{ $dev . '_height' },
    pvalue     => $Flag_Pvalue,
    ipvalue    => 1 - $Flag_Pvalue,
    width      => $Config->{device}->{ $dev . '_width' },
    xlabel     => $Flag_Xlabel,
    ylabel     => $Flag_Ylabel,
);

my $tmpl = Text::Template->new( TYPE => 'FILE', SOURCE => $arlet_file )
  or die "$Prog_Name: could not construct template: $Text::Template::ERROR";
my $rcode = $tmpl->fill_in(
    BROKEN =>
      sub { my %h = @_; die "$Prog_Name: error filling in template: " . $h{error} },
    HASH => \%tvalues
) or die "$Prog_Name: could not fill in the template: $Text::Template::ERROR";

if ($Flag_Show_Code) {
    print $rcode;
    exit;
}

my ( $stdout, $stderr );

# in the event the R code in the template wants to call commandArgs
push @R_Command, @ARGV;

# run3 will either blow up, or set something non-zero in $? if something went
# awry, so pass whatever that is along. But do need to show anything from R if
# things go awry for ease of debugging; otherwise remain silent (no news is
# good news).
eval { run3 \@R_Command, \$rcode, \$stdout, \$stderr; };
if ($@) {
    warn "$Prog_Name: R command: @R_Command\n";
    warn "$Prog_Name: run3() failed: $@\n";
    exit 1;
}
if ( $? >> 8 != 0 ) {
    warn "$Prog_Name: R command: @R_Command\n";
    warn $stderr;
    $Config->{_}->{hide_stdout} = 0;
}
print $stdout unless $Config->{_}->{hide_stdout};
exit $?;

##############################################################################
#
# SUBROUTINES

sub emit_help {
    warn
      "Usage: $Prog_Name [-o=png|pdf] [--width=f] [--height=f] \n",
      "    [--show-code] [--show-stdout] arlet [--help] [arletargs ..]\n";
    exit 64;
}

sub load_config {
    my ($arlet) = @_;

    my $global_conf =
      Config::Tiny->read( File::Spec->catfile( $Arlet_Dir, 'defaults.ini' ),
        'utf8' );

    my $arlet_conf =
      Config::Tiny->read( File::Spec->catfile( $Arlet_Dir, "$arlet.ini" ), 'utf8' );
    for my $key ( keys %$arlet_conf ) {
        if ( !exists $global_conf->{$key} ) {
            $global_conf->{$key} = $arlet_conf->{$key};
        } else {
            for my $subkey ( keys %{ $arlet_conf->{$key} } ) {
                $global_conf->{$key}->{$subkey} = $arlet_conf->{$key}->{$subkey};
            }
        }
    }

    return $global_conf;
}

sub stdin2tmpfile {
    $Tmp_Fh =
      File::Temp->new( TMPDIR => 1, TEMPLATE => "$Prog_Name.stdin.XXXXXXXXXX" );
    $Tmp_Fh->unlink_on_destroy(0) if $Flag_Show_Code;
    $Tmp_Fh->print($_) while readline STDIN;
    $Tmp_Fh->flush;
    $Tmp_Fh->sync;
    return $Tmp_Fh->filename;
}
